// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Asset {
  assetID          String   @id @default(cuid())
  txtStation       String
  txtDesc          String?
  txtCode          String
  txtMediaGroup    String
  txtMediaSubGroup String
  kodetitik        String?
  lnkMockup        String?
  numvisualW       String?
  numvisualH       String?
  numvisualSQM     String?
  numsizeW         String?
  numsizeH         String?
  numsizeD         String?
  numsizeSQM       String?
  numweightmedia   String?
  numweightstructure String?
  numpoweract      String?
  numpowerest      String?
  txtpixelpitch    String?
  txtnotes         String?
  stsActive        Boolean
  lnkTemplate      String?
  txtlevel         String?


  
  rentDetails      RentDetail[]
  
  @@unique([assetID])
}

model Client {
  clientID   Int      @id @default(autoincrement())
  txtClient  String
  txtCompany String?
  txtPhone   String?
  txtAddress String?
  
  rentDetails RentDetail[]
  
  @@unique([clientID])
}

model RentDetail {
  rentid     Int      @id @default(autoincrement())
  assetID    String
  clientID   Int
  datestart  String
  dateend    String
  txtsales   String?
  lnkreport  String?
  txtnotes   String?
  
  asset      Asset    @relation(fields: [assetID], references: [assetID])
  client     Client   @relation(fields: [clientID], references: [clientID])
  
  @@unique([rentid])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String @default("user")
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}